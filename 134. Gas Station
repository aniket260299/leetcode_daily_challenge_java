/**
 * @author Aniket
 */
class Solution {
    public int canCompleteCircuit(int[] gas, int[] cost) {
        int n = cost.length;
        int[][] greed = new int[n][2];
        for (int i = 0; i < n; i++) {
            greed[i][0] = i;
            greed[i][1] = gas[i] - cost[i];
        }
        Arrays.sort(greed, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[1] - o1[1];
            }
        });
        for (int i = 0; i < n; i++) {
            int index = greed[i][0];
            if (checkCircuit(gas, cost, index))
                return index;
        }
        return -1;
    }

    public boolean checkCircuit(int[] g, int[] c, int k) {
        int gas = 0;
        int cost = 0;
        int n = c.length;
        for (int i = k; i < n; i++) {
            gas -= cost;
            if (gas >= 0) {
                gas += g[i];
                cost = c[i];
            } else return false;
        }

        for (int i = 0; i <= k; i++) {
            gas -= cost;
            if (gas >= 0) {
                gas += g[i];
                cost = c[i];
            } else return false;
        }
        return true;
    }
}
