/**
 * @author Aniket
 */
class Solution {

    class Pair {
        TreeNode node;
        int index;

        Pair(TreeNode node, int index) {
            this.node = node;
            this.index = index;
        }
    }

    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 1));
        int maxCount = 0;

        while (!q.isEmpty()) {
            int size = q.size();
            int min, max;
            min = max = 0;

            for (int i = 0; i < size; i++) {
                Pair removed = q.remove();
                int index = removed.index;
                TreeNode node = removed.node;

                if (i == 0) min = index;
                if (i == size - 1) max = index;

                if (node.left != null)
                    q.add(new Pair(node.left, (index - 1) * 2 + 1));
                if (node.right != null)
                    q.add(new Pair(node.right, (index - 1) * 2 + 2));

            }

            maxCount = Math.max(max - min + 1, maxCount);
        }
        return maxCount;
    }
}
